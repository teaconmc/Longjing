import org.gradle.api.UnknownTaskException
import org.gradle.api.tasks.bundling.AbstractArchiveTask

afterProject { project ->
    // Only do this on root project for now. 
    // We are not sure about multi-project builds - we will come back later.
    if (project != rootProject) {
        return
    }

    // Apply maven-publishing plugin if haven't.
    if (!project.pluginManager.hasPlugin("maven-publish")) {
        project.pluginManager.apply "maven-publish"
    }
    // Apply signing plugin if haven't.
    if (!project.pluginManager.hasPlugin("signing")) {
        project.pluginManager.apply "signing"
    }

    // Try locating the task that produces production-ready artifact.
    // The precedence, from high to low, is as following:
    //   1. If `teaconArtifactTask' is defined in project extension, use the value specified there.
    //   2. If plugin `com.github.johnrengelman.shadow` is present, use `shadowJar` from that plugin.
    //   3. Use `jar`, failing if not found.
    // The task is expected to have type of org.gradle.api.tasks.bundling.AbstractArchiveTask.
    def targetTask = project.jar
    if (project.pluginManager.hasPlugin("com.github.johnrengelman.shadow")) {
        targetTask = project.tasks.shadowJar
    }
    if (project.ext.has("teaconArtifactTask")) {
        targetTask = project.ext.teaconArtifactTask
    }
    assert targetTask instanceof AbstractArchiveTask

    // Check if the project is still using default archivesBaseName.
    // Emit warning if so.
    if ("modid" == project.archivesBaseName) {
        println "::warning::Using default value ('modid') for archive base name; this is very likely to cause conflicts"
    }

    // Check if the project has correctly configured the reobf task as a finalizer task of the 
    // given archive task. Finalizer tasks are tasks that guaranteed to run after a task, regardless 
    // succeeded or failed. 
    // As for ForgeGradle, we expected that a `RenameJarInPlace` task will run after `jar` is done so that 
    // our build result is properly reobfuscated, and thus runnable in production. ForgeGradle automatically 
    // configures it for `assemble`, meaning it works out-of-box for regular `build`, but it does not work
    // out-of-box for any `publish` task.
    // This is the reason behind that `jar.finalizedBy('reobfJar')` line in Forge-MDK-provided `build.gradle`.
    // Criteria and actions are as following:
    //   1. We assert that the reobf task has type `RenameJarInPlace`.
    //   2. If the reobf task was not found, emit an error.
    //   3. If the reobf task was found but not correctly configured, emit a warning and configure it on our own.
    // In ForgeGradle, the name of a reobf task starts with 'reobf', followed by the original task name 
    // but with first letter capitalized. This means 'jar' -> 'reobfJar', 'shadowJar' -> 'reobfShadowJar',
    // 'NonStandardJar' -> 'reobfNonStandardJar'.
    def targetTaskName = targetTask.name
    def reobfTaskName = "reobf" + Character.toUpperCase(targetTaskName.charAt(0)) + targetTaskName.substring(1)
    //def reobfTaskType = Class.forName('net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace') // TODO Somehow get this type
    try {
        project.tasks.named(reobfTaskName/*, reobfTaskType*/) { reobfTask ->
            if (!(reobfTask in targetTask.finalizedBy.getDependencies(targetTask))) {
                println "::warning::Task '${targetTaskName}' did not correctly configure its finalizer tasks. " + 
                        "It is required to do so in order to make reobf work with publishing plugin. " + 
                        "This is also a sign that you have edited the MDK-provided build.gradle too far. " + 
                        "To fix this, re-add this at the end of your build.gradle: jar.finalizedBy('reobfJar')"
                        
                targetTask.finalizedBy reobfTask
            }
        }
    } catch (UnknownTaskException e) {
        println "::error::Cannot find task '${reobfTaskName}, did the project correctly configure it?'"
    }

    // Configure our publication task
    project.publishing {
        // Define the artifact to publish
        publications {
            teacon(MavenPublication) {
                // Hard-code group id to signify that we produced these builds.
                groupId = "org.teacon.teacon2021"
                // Assign a unique (maybe) artifact id
                artifactId = project.archivesBaseName
                // Append GitHub Action run number as part of the version number
                // We use hyphen to comply both Maven-style versioning (build number)
                // as well as SemVer (pre-release version number).
                version += System.env.GITHUB_RUN_NUMBER ? "-${System.env.GITHUB_RUN_NUMBER}" : "-private"

                artifact targetTask

                pom {
                    description = 'TeaCon2021 participating mod produced by Longjing, the TeaCon2021 Continuous Integration Framework.'
                }
            }
        }

        // Define our target repository
        repositories {
            maven {
                name = "teacon"
                // TODO We moved bucket name to the endpoint URL to trick gradle to use the 
                // virtual-host-style URL. Before gradle adds the support for generating a 
                // virtual-host-style URL for requesting, we probably want to use another 
                // S3-compliant service that supports path-style access.
                url = "s3://2021/ci/maven"
                credentials(AwsCredentials) {
                    accessKey System.env.S3_ACCESS_KEY
                    secretKey System.env.S3_SECRET_KEY
                }
            }
        }

        /*
         * After defining our publication and repository, executing the task `publishTeaconPublicationToTeaconRepository`
         * will publish the build result to our repository. Example:
         *
         *     ./gradlew -I setup.gradle publishTeaconPublicationToTeaconRepository
         *
         * The -I option is to specify this script as an init script, so that this script get executed against the
         * target project.
         */
    }

    project.signing {
        def keyId = System.env.PGP_ID
        def key = System.env.PGP_KEY
        def keyPassword = System.env.PGP_PWD
        useInMemoryPgpKeys(keyId, key, keyPassword)
        sign project.publishing.publications.teacon 
    }
    
    project.tasks.named("publishTeaconPublicationToTeaconRepository") {
        onlyIf {
            System.env.LONGJING
        }
        doLast {
            if (System.env.GITHUB_ACTIONS) {
                println "::set-output name=maven::${publication.groupId}:${publication.artifactId}:${publication.version}"
                println "::set-output name=download::https://archive.teacon.cn/2021/ci/maven/${publication.groupId.replace('.', '/')}/${publication.artifactId}/${publication.version}/${publication.artifactId}-${publication.version}.jar"
            }
        }
    }
}
